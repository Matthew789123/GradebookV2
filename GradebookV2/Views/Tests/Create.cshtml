@model GradebookV2.Models.Test
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Create test</h2>
<hr />
<p class="text-danger">@ViewBag.errorMessage</p>

@using (Html.BeginForm("Create", "Tests", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.HiddenFor(model => model.SubjectId)
        @Html.HiddenFor(model => model.ClassId)

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Start, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
        .Name("datetimepicker")
        .Value(DateTime.Now)
        .HtmlAttributes(new { style = "width: 100%", title = "datetimepicker" })
        .DateInput()
)
                @Html.ValidationMessageFor(model => model.Start, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })
            </div>
        </div>

        <hr />

        <div>
            <input id="Content" type="text" style="border:none;margin-bottom:1%;box-shadow:none" value="Question" class="form-control" />
            <input id="AnswerA" type="text" style="border:none;margin-bottom:1%;box-shadow:none" value="Answer A" class="form-control" />
            <input id="AnswerB" type="text" style="border:none;margin-bottom:1%;box-shadow:none" value="Answer B" class="form-control" />
            <input id="AnswerC" type="text" style="border:none;margin-bottom:1%;box-shadow:none" value="Answer C" class="form-control" />
            <input id="AnswerD" type="text" style="border:none;margin-bottom:1%;box-shadow:none" value="Answer D" class="form-control" />
            @Html.LabelFor(model => model.Questions.ToList()[0].CorrectAnswer, htmlAttributes: new { @class = "control-label" })
            <select id="CorrectAnswer" style="margin-bottom:1%">
                <option value="0" selected="selected">A</option>
                <option value="1">B</option>
                <option value="2">C</option>
                <option value="3">D</option>
            </select>
            <br />
            @Html.LabelFor(model => model.Questions.ToList()[0].Points, htmlAttributes: new { @class = "control-label" })
            <input id="Points" type="number" style="border:none;margin-bottom:1%;box-shadow:none" value="2" />
        </div>
        <br />
        <button type="button" id="newQuestion">Add question</button>

        <input type="hidden" id="questions" name="questions" />

        <hr />

        <div id="container">

        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>

        </div>
    </div>
}

<div id="modalQuestion" class="modal fade" data-keyboard="false" data-backdrop="static" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">x</button>
            </div>
            <div class="modal-body" style="display:inline">
                <div>
                    <p id="modalContent" style="word-wrap:break-word;margin-left:10px"></p>
                    <hr />
                    <div class="form-group">
                        @Html.LabelFor(model => model.Questions.ToList()[0].AnswerA, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <p id="modalA" style="word-wrap:break-word"></p>
                        </div>
                    </div>
                    <br />
                    <div class="form-group">
                        @Html.LabelFor(model => model.Questions.ToList()[0].AnswerB, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <p id="modalB" style="word-wrap:break-word"></p>
                        </div>
                    </div>
                    <br />
                    <div class="form-group">
                        @Html.LabelFor(model => model.Questions.ToList()[0].AnswerC, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <p id="modalC" style="word-wrap:break-word"></p>
                        </div>
                    </div>
                    <br />
                    <div class="form-group">
                        @Html.LabelFor(model => model.Questions.ToList()[0].AnswerD, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <p id="modalD" style="word-wrap:break-word"></p>
                        </div>
                    </div>
                    <hr />
                    <div class="form-group">
                        @Html.LabelFor(model => model.Questions.ToList()[0].CorrectAnswer, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <p id="modalCorrect" style="word-wrap:break-word"></p>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(model => model.Questions.ToList()[0].Points, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <p id="modalPoints" style="word-wrap:break-word"></p>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <button id="modalDelete">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section scripts {

    <script type="text/javascript">
        let questions = [];
        let counter = 1;
        $(document).ready(function () {
            $("#newQuestion").click(function () {
                questions.push({
                    Content: $("#Content").val(),
                    AnswerA: $("#AnswerA").val(),
                    AnswerB: $("#AnswerB").val(),
                    AnswerC: $("#AnswerC").val(),
                    AnswerD: $("#AnswerD").val(),
                    CorrectAnswer: $("#CorrectAnswer").val(),
                    Points: $("#Points").val(),
                    Id: counter
                });
                $("#Content").val("Question");
                $("#AnswerA").val("Answer A");
                $("#AnswerB").val("Answer B");
                $("#AnswerC").val("Answer C");
                $("#AnswerD").val("Answer D");
                $("#CorrectAnswer").val("0").change();
                $("#Points").val(2);
                $("#questions").val(JSON.stringify({ 'questions': questions }));
                $("#container").append($("<div/>")
                    .attr("value", counter)
                    .addClass("questionDiv")
                    .attr("style", "cursor:pointer;font-size:large;display:inline-block;margin-right:1%")
                    .html(counter)
                    .on("click", function (event) {
                        let q = questions.find(qu => qu.Id == $(event.target).attr("value"));
                        $("#modalContent").text(q.Content);
                        $("#modalA").text(q.AnswerA);
                        $("#modalB").text(q.AnswerB);
                        $("#modalC").text(q.AnswerC);
                        $("#modalD").text(q.AnswerD);
                        let correct;
                        switch (q.CorrectAnswer) {
                            case "0":
                                correct = "A";
                                break;
                            case "1":
                                correct = "B";
                                break;
                            case "2":
                                correct = "C";
                                break;
                            default:
                                correct = "D";
                                break;
                        }
                        $("#modalCorrect").text(correct);
                        $("#modalPoints").text(q.Points);
                        $("#modalDelete").val(q.Id);
                        $("#modalQuestion").modal('show');
                    })
                    .on("mouseenter", function () {
                        $(this).css('font-weight', 'bold');
                    })
                    .on("mouseout", function () {
                        $(this).css('font-weight', 'normal');
                    }));
                counter++;
            });
            $("#modalDelete").click(function (event) {
                const IdCurrent = $(event.target).attr("value");
                const index = questions.indexOf(questions.find(qu => qu.Id == IdCurrent));
                questions.splice(index, 1);
                questions.forEach(q => { if (q.Id > index) q.Id--; });
                counter--;
                $(".questionDiv").each((i, div) => {
                    const Id = div.getAttribute("value");
                    if (Id == IdCurrent) div.remove();
                    else if (Id > IdCurrent) {
                        div.setAttribute("value", Id - 1);
                        div.innerText = Id - 1;
                    }
                });
                $("#modalQuestion").modal('hide');
            });
        });
    </script>
}
